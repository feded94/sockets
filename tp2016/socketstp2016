	//Creo el hilo planificador
		log_info(archivoLog,"Inicializo los hilos de planificacion y deadlock");
		pthread_mutex_init(&mutexEntrBQ,NULL);
		pthread_mutex_init(&mutexMapa,NULL);
		pthread_create(&hiloPlanificador,NULL,planificador, NULL);
		pthread_create(&hiloDeadlock,NULL,deadlock, NULL );



	//Inicializo socket para escuchar
		log_info(archivoLog,"Inicializo el socket de escucha");
		struct sockaddr_in addr;
		socklen_t addrlen = sizeof(addr);
		int listeningSocket;
		create_serverSocket(&listeningSocket, mapa->puerto);

	//Registro signal handler
		log_info(archivoLog,"Registro handler de seniales");
		recvSIGUSR2 = 0;
		signal(SIGUSR2, sigusr2_handler); //signal-number 12

	//Inicializo el select
		log_info(archivoLog,"Inicializo el SELECT");
		fd_set master;		// conjunto maestro de descriptores de fichero
		fd_set read_fds;	// conjunto temporal de descriptores de fichero para select()
		int fdmax;			// nÃºmero mÃ¡ximo de descriptores de fichero
		int newfd;			// descriptor de socket de nueva conexiÃ³n aceptada
		int i;
		int nbytes;
		char package;

		FD_ZERO(&master);					// borra los conjuntos maestro y temporal
		FD_ZERO(&read_fds);
		FD_SET(listeningSocket, &master);	// aÃ±adir listener al conjunto maestro
		fdmax = listeningSocket; 			// seguir la pista del descriptor de fichero mayor, por ahora es este

		//Me mantengo en el bucle para asi poder procesar cambios en los sockets
		while(1) {
			//Copio los sockets y me fijo si alguno tiene cambios, si no hay itinero de vuelta
			read_fds = master; // copialo
			if (select(fdmax+1, &read_fds, NULL, NULL, NULL)<0) {
				if (errno != EINTR){
					perror("select error");
					return 1;
				}
			}else{
				//Recorro los sockets con cambios
				for(i = 0; i <= fdmax; i++) {
					//Detecto si hay datos en un socket especifico
					if (FD_ISSET(i, &read_fds)) {
						//Si es el socket de escucha proceso el nuevo socket
						if (i == listeningSocket) {
							addrlen = sizeof(addr);
							if ((newfd = accept(listeningSocket, (struct sockaddr*)&addr, &addrlen)) == -1){
								log_info(archivoLog,"Ocurrio error al aceptar una conexion");
							} else {
								FD_SET(newfd, &master); // AÃ±ado el nuevo socket al  select
								//Actualizo la cantidad
								if (newfd > fdmax) {
									fdmax = newfd;
								}

								log_trace(archivoLog, "Nueva conexion de %s en  el socket %d", inet_ntoa(addr.sin_addr),newfd);

							}
						} else {
							//Si es un socket existente
							if ((nbytes = recv(i, &package, 1, 0)) <= 0) {
								//Si la conexion se cerro
								if (nbytes == 0) {
									log_trace(archivoLog, "El socket %d se desconecto", i);
								} else {
									log_trace(archivoLog, "Error al recibir informacion del socket");
								}
								close(i);
								FD_CLR(i, &master); // eliminar del conjunto maestro
							} else {
								// tenemos datos de algÃºn cliente
								if (nbytes != 0){
									log_trace(archivoLog, "Ingresa nuevo entrenador a la lista de entrenadores preparados");
									t_entrenador* entrenador = malloc(sizeof(t_entrenador));
									entrenador->simbolo = package;
									entrenador->socket = i;
									entrenador->pokemons = list_create();
									entrenador->ubicacion.x = 1;
									entrenador->ubicacion.y = 1;
									entrenador->planificador.ubicacionObjetivo.x = -1;
									entrenador->planificador.ubicacionObjetivo.y = -1;
									entrenador->tiempoDeIngresoAlMapa = (int)time(NULL);
									list_add(entrenadoresPreparados, entrenador);
									FD_CLR(i, &master);// eliminar del conjunto maestro

									log_trace(archivoLog, "Agrego entrenador a preparados: %c", entrenador->simbolo);
								}

							}
						}
					}
				}
			}
		}